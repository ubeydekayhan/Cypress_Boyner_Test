1) Konsola ilk yazilacak kod:
npm init
2) sonra cypress kurmak icin:
npm install cypress --save-dev

3) iframe handle icin yapilacaklar.
plugin indir
    npmjs.com sayfasindan https://www.npmjs.com/package/cypress-iframe linkine gir
    npm install -D cypress-iframe
    komutunu terminale yaz

    2-Import plugin
    import 'cypress-iframe';
    // or
    require('cypress-iframe');
    kodlarindan birini support klasorundeki e2e.js dosyasina yapistir.

4) Drag drop icin
npmjs.com sitesinden drag-drop plugin indir : npm install --save-dev @4tw/cypress-drag-drop
    kodu terminale yapistir
    import '@4tw/cypress-drag-drop' kodunu e2e.js dosyasina yapistir

CUCUMBER İÇİN
1) https://www.npmjs.com/package/cypress-cucumber-preprocessor sitesinden
npm install --save-dev cypress-cucumber-preprocessor alip terminale yapıştır. install et.

  2) index.js dosyasina 
  const cucumber = require('cypress-cucumber-preprocessor').default

module.exports = (on, config) => {
  on('file:preprocessor', cucumber())
}

ekledik

3) cypress.config.js dosyasina 
const { defineConfig } = require("cypress");
const cucumber = require('cypress-cucumber-preprocessor').default 
module.exports = defineConfig({
  reporter: 'cypress-mochawesome-reporter',
  

  e2e: {
    setupNodeEvents(on, config) {
      on('file:preprocessor', cucumber());
      require('cypress-mochawesome-reporter/plugin')(on);
      
    },

    specPattern: "**/*.feature",
  },
});

ekle.

4-  https://www.npmjs.com/package/cypress-mochawesome-reporter den 
npm i --save-dev cypress-mochawesome-reporter komutu ile plugin yükle

5) extension dan "Cucumber (Gherkin) Full Support" kurulur

6) https://www.npmjs.com/package/cypress-cucumber-preprocessor sitesinden
import { Given, When, Then, And } from "cypress-cucumber-preprocessor/steps";  kodu alinir
xxxxxx.js dosyasinin yani stepdefinition dosyasinin basina yapistirilir.

7) feature file ile stepdefinition dosyasi ayni klasor icinde bulunmali.

DIGER YAPILANDIRMALAR
1) package.json dosyasına 
"author": "hakan kara",
  "license": "ISC",
  "devDependencies": {
    "cypress": "^13.3.0",
    "cypress-cucumber-preprocessor": "^4.3.1",
    "cypress-mochawesome-reporter": "^3.6.0"
  },
  "cypress-cucumber-preprocessor": {
    "nonGlobalStepDefinitions": false,
    "nonGlobalStepBaseDir": "cypress/e2e/step_definitions",
    "stepDefinitions": "cypress/e2e"
  }
ekledim

2) TESTLERİ ÇALIŞTIRMA
./node_modules/.bin/cypress run ==> tum testleri calistirir
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
./node_modules/.bin/cypress-tags run -e TAGS='@smoke' ==> tagi @smoke olanlari calistirir

./node_modules/.bin/cypress-tags run -e TAGS='not @smoke' ==> tagi  @smoke olanlar haric hepsini calistirir

) windowsta hata alinca asagidaki kod yazilir

3) XRH'lari gizlemek icin e2e.js dosyasina asagidaki kod yazilir
const app=window.top;
if (!app.document.head.querySelector('[data-hide-command-log-request]') || !app.document.head.querySelector('[data-hide-command]')) {
    const style= app.document.createElement('style');
    style.innerHTML='.command-name-request, .command-name-xhr {display: none}';
    style.setAttribute('data-hide-command-log-request', '');
    app.document.head.appendChild(style);
}

4) command.js dosyasina metotlar koyulur. Bu metotlar icin kullanilan classlarda imporuta ihtiyac yoktur.

5) pages klasor altina metot ve variable olusturulabilir. 
Bu dosyadakiler baska dosyadan import edilebilmek icin pages altindaki dosyanin en altina su kod yazilir:
import { boynerMan } from "../../pages/boynerMan";

bu dosyadan veri cekecek diger dosyalarin en ustune su kod yazilir:
import { boynerMan } from "../../pages/boynerMan";

    let data;
    before(() => {
        //fixture klasorundan boynerData dosyasinda olusturulan datalari okumak icin
        cy.fixture("boynerErkek").then(function (fixtureData) {
            data = fixtureData;
           
        })
    })

sonrasinda sayfa icinde olusturulan data objesi ile oradan veriler ismi ile cekilir.

6) file-upload icin

 https://www.npmjs.com/package/cypress-file-upload sitesinden 
    npm install --save-dev cypress-file-upload kodunu terminale yazariz

    commands.js dosyasina
    import 'cypress-file-upload'
    yazariz

    file-upload yapilan dosyada kod soyledir:
     cy.get('#fine-uploader-gallery > .qq-uploader-selector > .qq-upload-button-selector > input').attachFile('junit.png', { fileContent: 'fixtures/junit.png' });

7) commands.js dosyasi function olusturmak icindir. Cypress.Commands.add("xxxxx") seklinde function tanimlama baslar.
xxxxx yerine function a verilecek isim girilir. Verilen isim baska bir sayfada cy.xxxxxx seklinde import etmeden kullanilir.


8) Faker kurulumu:
https://www.npmjs.com/ sitesine gideriz
faker yazariz
npm install --save-dev @faker-js/faker kodunu terminale yazip calistiririz
kullanilan dosyada import yapilir=> import { faker } from '@faker-js/faker' ile
   